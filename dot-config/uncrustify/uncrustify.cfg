### DIKU Styleguide tenets (https://github.com/diku-dk/su-guides/blob/main/guides/CSharpStyle.md):
# * 4 space indentation, always
#
# * 100 character line width (but small screen, so I use 80)
#
# * K&R style braces: Opening brace on same line, closing brace on separate
# 	line, *except* when { ... } or } ... { fit on a single line, and are part of
# 	the same statement
#
# * Braces are *always* required, even around one-line blocks (e.g. { get; })
# 
# * Linebreaks between 'using' and namespace declarations
#
# * Blank line between class members (properties, methods, etc.)
#
# * Space before "(" after a for-, while or if- statement
#
# * Space before "{"
#
# * Space after each parameter (e.g. f(x, y, z))
# 
# * Space at each side of infix operators (+, *, /, %, etc.)


### Terminology:
# "Ignore" means do not change it.
# "Add" in the context of spaces means make sure there is at least 1.
# "Add" elsewhere means make sure one is present.
# "Remove" mean remove the space/brace/newline/etc.
# "Force" in the context of spaces means ensure that there is exactly 1.
# "Force" in other contexts means the same as "add".


### Basic settings
code_width=80
indent_columns = 4		# 4 space indentation
indent_with_tabs = 0	# Don't use tabs
indent_class = true		# Indents the whole class
indent_col1_comment	= true		# Indent comments in first column


### Newline behavior
# nl_<1>_<2> indicates choice of newline between "1" and "2"
# Options: ignore/add/remove/force
nl_fdef_brace 	= remove
nl_class_brace 	= remove
nl_enum_brac 	= remove
nl_struct_brace = remove
nl_if_brace 	= remove
nl_else_brace 	= remove	#     else ? {
nl_brace_else 	= remove	# } ? else?
nl_for_brace 	= remove
nl_while_brace 	= remove
nl_do_brace 	= remove
nl_switch_brace = remove
nl_try_brace 	= remove
nl_after_semicolon = true
# nl_before_member = remove # doesnt seem to work
# nl_after_member = remove

nl_max 			= 2			# Max amout of newlines between members, etc.

### Spacing behavior
# sp_<1>_<2> indicates choice of space between "1" and "2"
# sparen = Control statment parenthesis (for, if, while , etc.)
# Options: ignore/add/remove/force
sp_arith 			  	= force 	# Space around operators
sp_assign 			  	= force 	# Space around =
sp_bool 				= force     # Boolean operators , &&, ||
sp_compare 				= force     # Comparisons '<', '>'
sp_fparen_brace 		= force	  	# ) from func def and { after
sp_func_def_paren		= remove
sp_sparen_brace 		= force	  	# Control statements, for, if, while, etc.
sp_before_sparen		= force		# if (
sp_inside_sparen		= remove
sp_brace_else 			= force
sp_else_brace 			= force
sp_after_comma 			= force
sp_inside_fparen 		= remove    # Space inside non-empty function call
sp_inside_fparens 		= remove	# Space inside empty function call
# sp_cmt_cpp_start 		= force     # Ensures 1 space between // and comment content

### Dead options
# Doesn't work in all cases, as should be expected
# sp_paren_brace	= remove # Not general, as one might expect
# sp_func_def_paren_empty	= remove # Not general, as one might expect

nl_after_brace_open = true

### Alignment
indent_paren_close = 2  # Sets closing paren to one indent level less
indent_switch_case = indent_columns


### Only split function calls when needed
# nl_func_call_start_multi_line = true
nl_func_call_args_multi_line = true
# nl_func_call_end_multi_line = true

nl_func_def_start_multi_line = true
nl_func_def_args_multi_line = true
nl_func_def_end_multi_line = true


nl_func_decl_start_multi_line = true
nl_func_decl_args_multi_line = true
nl_func_decl_end_multi_line = true

nl_func_call_end = remove

nl_func_def_start_single        = remove
nl_func_def_end_single        = remove
nl_func_decl_end_single        = remove
nl_func_decl_start_single        = remove
# nl_func_call_end_single        = remove #doesnt exist
# nl_func_call_start_single        = remove #doesnt exist


# nl_func_call_args_multi_line_ignore_span = true
nl_func_call_args_multi_line_ignore_closures = true

pos_assign = join


mod_remove_extra_semicolon = true
# vim: set noexpandtab tabstop=4 shiftwidth=2 softtabstop=0
